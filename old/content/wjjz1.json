    <!-- 错误信息对话框 -->
    <dialog id="errorDialog">
      <form method="dialog">
        <h2>错误信息</h2>
        <div id="errorMessage" style="margin: 20px 0; color: red;"></div>
        <div style="margin-top: 15px;">
          <button type="button" onclick="closeErrorDialog()" class="buttonwhite">确定</button>
        </div>
      </form>
    </dialog>
<script>// 用于存储待保存的内容
let contentToSave = '';

/**
 * 自定义保存文件名函数
 * 显示文件保存模态框并绑定事件监听器
 */
function saveToCustomFile() {
  // 显示文件名输入模态框
  document.getElementById('filenameModal').showModal();
  document.getElementById('customFilename').focus();
}

/**
 * 确认保存函数
 * 处理文件保存逻辑
 */
async function confirmSave() {
  const filenameInput = document.getElementById('customFilename');
  const tcInput = document.getElementById('tcInput');
  const extensionSelect = document.getElementById('fileExtension');
  const filePathInput = document.getElementById('filePath');
  
  let filename = filenameInput.value.trim();
  let tcContent = tcInput.value.trim();
  let extension = extensionSelect.value;
  let customPath = filePathInput.value.trim();
  
  // 检查是否输入了内容
  if (tcContent === '') {
    showErrorDialog('请输入一些内容再保存');
    return;
  }
  
  // 存储待保存的内容
  contentToSave = tcContent;
  
  // 如果没有输入文件名，使用默认文件名
  if (filename === '') {
    filename = 'user-data';
  }
  
  // 构造完整文件名
  let fullFilename;
  if (customPath) {
    // 如果用户指定了路径，则使用指定的路径和文件名
    // 检查路径是否以斜杠结尾（表示是一个目录）
    if (customPath.endsWith('/') || customPath.endsWith('\\')) {
      fullFilename = `${customPath}${filename}.${extension}`;
    } else {
      // 如果路径不以斜杠结尾，检查是否包含文件扩展名
      const lastSlashIndex = Math.max(customPath.lastIndexOf('/'), customPath.lastIndexOf('\\'));
      const basename = lastSlashIndex >= 0 ? customPath.substring(lastSlashIndex + 1) : customPath;
      if (basename.includes('.')) {
        // 路径包含文件名和扩展名
        fullFilename = customPath;
      } else {
        // 路径是一个目录
        fullFilename = `${customPath}/${filename}.${extension}`;
      }
    }
  } else {
    // 否则使用默认的文件名
    fullFilename = `${filename}.${extension}`;
  }
  
  // 如果路径是绝对路径，则直接使用完整路径
  if (customPath && (customPath.startsWith('/') || customPath.includes(':\\') || customPath.includes(':/'))) {
    // 检查路径是否以斜杠结尾（表示是一个目录）
    if (customPath.endsWith('/') || customPath.endsWith('\\')) {
      fullFilename = `${customPath}${filename}.${extension}`;
    } else {
      // 如果路径不以斜杠结尾，检查是否包含文件扩展名
      const lastSlashIndex = Math.max(customPath.lastIndexOf('/'), customPath.lastIndexOf('\\'));
      const basename = lastSlashIndex >= 0 ? customPath.substring(lastSlashIndex + 1) : customPath;
      if (basename.includes('.')) {
        // 路径包含文件名和扩展名
        fullFilename = customPath;
      } else {
        // 路径是一个目录
        fullFilename = `${customPath}/${filename}.${extension}`;
      }
    }
  }
  
  try {
    // 检查 electronAPI 是否可用
    if (typeof window.electronAPI === 'undefined' || typeof window.electronAPI.writeToProjectFile !== 'function') {
      showErrorDialog('Electron API 不可用，无法保存文件');
      return;
    }
    
    // 调用主进程将内容写入项目文件夹中的文件
    const result = await window.electronAPI.writeToProjectFile(fullFilename, contentToSave);
    
    if (result.success) {
      document.getElementById('userInputResult').innerHTML += `<p style="color: green;">内容已保存到: ${result.path}</p>`;
    } else {
      showErrorDialog(`保存失败: ${result.error}`);
    }
  } catch (error) {
    showErrorDialog(`保存出错: ${error.message}`);
  } finally {
    // 清空输入但不关闭对话框
    filenameInput.value = '';
    tcInput.value = '';
    filePathInput.value = '';
    extensionSelect.value = 'txt';
    contentToSave = '';
  }
}

/**
 * 取消保存函数
 * 隐藏模态框并清空输入
 */
function cancelSave() {
  const filenameInput = document.getElementById('customFilename');
  const tcInput = document.getElementById('tcInput');
  const extensionSelect = document.getElementById('fileExtension');
  const customExtInput = document.getElementById('customExtension');
  const filePathInput = document.getElementById('filePath');
  
  // 关闭dialog
  document.getElementById('filenameModal').close();
  
  // 清空输入
  filenameInput.value = '';
  tcInput.value = '';
  filePathInput.value = '';
  if (extensionSelect.value === 'custom') {
    customExtInput.value = '';
  }
  extensionSelect.value = 'txt';
  customExtInput.style.display = 'none';
  contentToSave = '';
}

/**
 * 关闭对话框函数
 * 仅关闭模态框，不清空输入
 */
function closeDialog() {
  document.getElementById('filenameModal').close();
}

/**
 * 清空对话框输入函数
 * 清空对话框中的所有输入内容
 */
function clearDialogInputs() {
  const filenameInput = document.getElementById('customFilename');
  const tcInput = document.getElementById('tcInput');
  const extensionSelect = document.getElementById('fileExtension');
  const filePathInput = document.getElementById('filePath');
  
  // 清空输入
  filenameInput.value = '';
  tcInput.value = '';
  filePathInput.value = '';
  extensionSelect.value = 'txt';
  contentToSave = '';
}

/**
 * 显示错误对话框函数
 * 在错误对话框中显示指定的错误信息
 * @param {string} message - 要显示的错误信息
 */
function showErrorDialog(message) {
  const errorMessageElement = document.getElementById('errorMessage');
  errorMessageElement.textContent = message;
  document.getElementById('errorDialog').showModal();
}

/**
 * 关闭错误对话框函数
 */
function closeErrorDialog() {
  document.getElementById('errorDialog').close();
}

/**
 * DOM内容加载完成后绑定事件监听器
 */
document.addEventListener('DOMContentLoaded', () => {
  const filenameInput = document.getElementById('customFilename');
  filenameInput.addEventListener('keyup', function(event) {
    if (event.key === 'Enter') {
      confirmSave();
    }
  });
  
  const tcInput = document.getElementById('tcInput');
  tcInput.addEventListener('keyup', function(event) {
    if (event.key === 'Enter') {
      confirmSave();
    }
  });
});
/**
 * 文本更改函数
 * 循环更改文本内容，每次循环先显示1后显示2
 */


/**
 * 选择保存路径函数
 * 使用Electron对话框选择文件保存路径
 */
async function selectSavePath() {
  try {
    // 获取文件名和扩展名
    const filenameInput = document.getElementById('customFilename');
    const extensionSelect = document.getElementById('fileExtension');
    const customExtInput = document.getElementById('customExtension');
    
    let filename = filenameInput.value.trim();
    let extension = extensionSelect.value;
    
    // 如果没有输入文件名，使用默认文件名
    if (filename === '') {
      filename = 'user-data';
    }
    
    // 如果选择了自定义扩展名
    if (extension === 'custom') {
      extension = customExtInput.value.trim();
      // 如果自定义扩展名为空，则默认使用txt
      if (extension === '') {
        extension = 'txt';
      }
    }
    
    // 构造默认文件名
    const defaultFilename = `${filename}.${extension}`;
    
    // 检查 electronAPI 是否可用
    if (typeof window.electronAPI === 'undefined' || typeof window.electronAPI.showSaveDialog !== 'function') {
      showErrorDialog('Electron API 不可用，无法选择保存路径');
      return;
    }
    
    // 调用Electron对话框选择保存路径
    const result = await window.electronAPI.showSaveDialog({
      defaultPath: defaultFilename,
      filters: [
        { name: 'Text Files', extensions: ['txt'] },
        { name: 'JSON Files', extensions: ['json'] },
        { name: 'HTML Files', extensions: ['html'] },
        { name: 'Markdown Files', extensions: ['md'] },
        { name: 'CSV Files', extensions: ['csv'] },
        { name: 'All Files', extensions: ['*'] }
      ]
    });
    
    if (!result.canceled && result.filePath) {
      document.getElementById('filePath').value = result.filePath;
      document.getElementById('selectedExtension').value = extension;
    }
  } catch (error) {
    showErrorDialog(`选择保存路径时出错: ${error.message}`);
  }
}
</script>
<div>
   
    <!-- 添加用户输入内容区域 -->
    
    <div>
      <button onclick="saveToCustomFile()" class="buttonwhite">保存文件</button>
    
    </div>
    
    <!-- 自定义文件名模态框 -->
    <dialog id="filenameModal">
      <form method="dialog">
        <h2>输入文件信息</h2>
        <div>
          <label for="customFilename">文件名:</label>
          <input type="text" id="customFilename" placeholder="请输入文件名">
          <input type="text" id="tcInput" placeholder="请输入一些内容">
        </div>
        <div style="margin: 10px 0;">
          <label for="fileExtension">文件扩展名:</label>
          <select id="fileExtension">
            <option value="txt">txt</option>
            <option value="json">json</option>
            <option value="md">md</option>
            <option value="html">html</option>
            <option value="csv">csv</option>
          </select>
        </div>
       
  
      
        <div>
          <label for="filePath">保存路径:</label>
          <input type="text" id="filePath" placeholder="通过选择文件按钮指定保存位置" value="" readonly>
          <button type="button" onclick="selectSavePath()" class="buttonwhite">选择保存位置</button>
          <small style="color: #666;">提示：点击"选择保存位置"按钮来选择文件保存位置</small>
          <!-- 隐藏的文件扩展名字段 -->
          <input type="hidden" id="selectedExtension" value="txt">
            <div id="userInputResult" style="margin-top: 10px; padding: 10px; border: 1px solid #ccc; min-height: 20px;  border-radius: 10px;"></div>
        </div>
        <div>
          <button type="button" onclick="confirmSave()" class="buttonwhite">确定保存</button>
          <button type="button" onclick="clearDialogInputs()" class="buttonwhite">清空输入</button>
          <button type="button" onclick="closeDialog()" class="buttonwhite">关闭窗口</button>
        </div>
      </form>
    </dialog>
</div>